<div class="add-activity-container">
    <h2>Edit Activity</h2>
    <form action="/manage-activity/update" method="POST" id="edit-activity-form">
      
      <input type="hidden" name="id" value="<%= activity.id %>">

      <label for="title">Activity Title:</label>
      <input type="text" name="title" required value="<%= activity.title %>">

      <label for="provider_name">Provider Name:</label>
      <input type="text" name="provider_name" required value="<%= activity.provider_name %>">

      <label for="website">Provider Website:</label>
      <input class="smaller" type="url" name="website" value="<%= activity.website || '' %>">

      <label for="participating_schools">Participating Schools:</label>
      <input type="text" name="participating_schools" value="<%= activity.participating_schools || '' %>">

      <label for="description">Description:</label>
      <textarea name="description" required><%= activity.description %></textarea>

      <label for="contact_email">Contact Email:</label>
      <input class="smaller" type="email" name="contact_email" value="<%= activity.contact_email || '' %>">

      <label for="day">Day of Week:</label>
      <select name="day" required>
        <option value="">Select</option>
        <% ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"].forEach(day => { %>
          <option value="<%= day %>" <%= activity.day === day ? 'selected' : '' %>><%= day %></option>
        <% }) %>
      </select>

      <label for="start_time">Start Time:</label>
      <input type="time" name="start_time" value="<%= activity.start_time.slice(0,5) %>">

      <label for="stop_time">Stop Time:</label>
      <input type="time" name="stop_time" value="<%= activity.stop_time.slice(0,5) %>">

      <label for="target_group">Target Group:</label>
      <select name="target_group" required>
        <option value="">Select</option>
        <% ["Children", "Youth", "Adults", "Everyone", "Families", "Other"].forEach(group => { %>
          <option value="<%= group %>" <%= activity.target_group === group ? 'selected' : '' %>><%= group %></option>
        <% }) %>
      </select>

      <label for="age_lower">Age Lower:</label>
      <input type="number" name="age_lower" value="<%= activity.age_lower %>">

      <label for="age_upper">Age Upper:</label>
      <input type="number" name="age_upper" value="<%= activity.age_upper %>">

      <label for="total_spaces">Total Spaces:</label>
      <input type="number" name="total_spaces" required value="<%= activity.total_spaces %>">

      <label for="spaces_remaining">Spaces Remaining:</label>
      <input type="number" name="spaces_remaining" required value="<%= activity.spaces_remaining %>">

      <label for="cost">Cost (£):</label>
      <input class="even-smaller" type="text" name="cost" required value="<%= Number(activity.cost).toFixed(2) %>">

      <h3>Address Details</h3>
      <label for="street_1">Street Address / Building Name:</label>
      <input type="text" name="street_1" required value="<%= activity.street_1 || '' %>">

      <label for="street_2">Street Address 2:</label>
      <input type="text" name="street_2" value="<%= activity.street_2 || '' %>">

      <label for="city">City:</label>
      <input class="smaller" type="text" name="city" value="<%= activity.city || '' %>">

      <label for="postcode">Postcode:</label>
      <input class="even-smaller" type="text" name="postcode" required value="<%= activity.postcode || '' %>">

      <button type="submit">Update Activity</button>
    </form>
</div>


<script>

  document.addEventListener("DOMContentLoaded", function () {
    const totalSpacesDropdown = document.getElementById("total_spaces");
    const spacesRemainingDropdown = document.getElementById("spaces_remaining");
    const ageStartDropdown = document.getElementById("age_lower");
    const ageEndDropdown = document.getElementById("age_upper");
    const costInput = document.getElementById("cost");
    const postcodeInput = document.getElementById("postcode");
    const startTimeDropdown = document.getElementById("start_time");
    const stopTimeDropdown = document.getElementById("stop_time");
    const form = document.getElementById("add-activity-form");
  
    /** Populate total spaces dropdown (1 to 100) */
    for (let i = 1; i <= 100; i++) {
      totalSpacesDropdown.appendChild(new Option(i, i));
    }
  
    /** Update spaces remaining dropdown dynamically */
    function updateSpacesRemaining() {
      spacesRemainingDropdown.innerHTML = '';
      const totalSpaces = parseInt(totalSpacesDropdown.value, 10);
      if (!isNaN(totalSpaces)) {
        for (let i = totalSpaces; i >= 0; i--) {
          spacesRemainingDropdown.appendChild(new Option(i, i));
        }
      }
    }

    totalSpacesDropdown.addEventListener("change", updateSpacesRemaining);
  
    /** Populate age dropdowns (0 to 30) */
    for (let i = 0; i <= 30; i++) {
      ageStartDropdown.appendChild(new Option(i, i));
      ageEndDropdown.appendChild(new Option(i, i));
    }
  
    /** Generate times from 06:00 to 22:00 in 15-minute intervals */
    function generateTimeOptions() {
      const times = [];
      for (let hour = 6; hour <= 22; hour++) {
        for (let minutes of ["00", "05", "10", "15", "20", "25", "30", "35", "45", "50", "55"]) {
          if (hour === 22 && minutes !== "00") break; // Ensure last time is 22:00
          times.push(`${hour.toString().padStart(2, "0")}:${minutes}`);
        }
      }
      return times;
    }

    /** Populate start time dropdown */
    const timeOptions = generateTimeOptions();

    timeOptions.forEach(time => {
      startTimeDropdown.appendChild(new Option(time, time));
    });

    /** Update stop time options based on selected start time */
    startTimeDropdown.addEventListener("change", function () {
      stopTimeDropdown.innerHTML = ''; // Reset stop time options
      const selectedStartTime = startTimeDropdown.value;

      if (!selectedStartTime) return;

      // Only add times that are later than the selected start time
      timeOptions.forEach(time => {
        if (time > selectedStartTime) {
          stopTimeDropdown.appendChild(new Option(time, time));
        }
      });
    });
  
    /** Dynamically update end age options based on start age selection */
    ageStartDropdown.addEventListener("change", function () {
      const startAge = parseInt(ageStartDropdown.value, 10);
      ageEndDropdown.innerHTML = ""; // Clear existing options
    
      for (let i = startAge; i <= 30; i++) {
        ageEndDropdown.appendChild(new Option(i, i));
      }
    });
  
    /** Ensure start age is not greater than end age */
    function validateAgeRange() {
      const startAge = parseInt(ageStartDropdown.value, 10);
      const endAge = parseInt(ageEndDropdown.value, 10);
      if (startAge > endAge) {
        alert("Start age cannot be greater than end age.");
        return false;
      }
      return true;
    }
  
    /** Enforce valid number format in cost input */
    costInput.addEventListener("input", function () {
      this.value = this.value
        .replace(/[^0-9.]/g, "") // Remove invalid characters
        .replace(/(\..*?)\..*/g, "$1") // Ensure only one decimal
        .replace(/^(\d*\.\d{2}).*$/, "$1"); // Limit to 2 decimal places
    });
  
    /** Auto-uppercase and format UK postcode */
    postcodeInput.addEventListener("input", function () {
      let formattedPostcode = this.value.toUpperCase().trim();
    
      // Automatically insert space if missing (e.g., SW1A1AA → SW1A 1AA)
      const formatted = formattedPostcode.replace(/^([A-Z]{1,2}\d[A-Z\d]?) ?(\d[A-Z]{2})$/, "$1 $2");
    
      this.value = formatted;
      validatePostcode(formatted);
    });

    /** Ensure start time is not greater than stop time */
    function validateTimeRange() {
      const startTime = startTimeDropdown.value;
      const stopTime = stopTimeDropdown.value;

      if (startTime && stopTime && stopTime <= startTime) {
        alert("Finish time must be later than start time.");
        return false;
      }
      return true;
    }
  
    /** Check postcode validity using Postcodes.io API */
    async function validatePostcode(postcode) {
      const cleanPostcode = postcode.replace(/\s+/g, "").toUpperCase(); // Remove spaces for API request
      if (cleanPostcode.length < 5) {
        postcodeInput.style.border = "2px solid red";
        return;
      }
    
      try {
        const response = await fetch(`https://api.postcodes.io/postcodes/${cleanPostcode}/validate`);
        const data = await response.json();
        
        if (data.result) {
          postcodeInput.style.border = "2px solid green"; // ✅ Valid
        } else {
          postcodeInput.style.border = "2px solid red"; // ❌ Invalid
        }
      } catch (error) {
        console.error("Error checking postcode:", error);
        postcodeInput.style.border = "2px solid red"; // ❌ Assume invalid on API failure
      }
    }
  
    /** Form Submission: Validate before submitting */
    form.addEventListener("submit", async function (event) {
      event.preventDefault(); // Stop form submission until validation is complete
    
      const totalSpaces = parseInt(totalSpacesDropdown.value, 10);
      const spacesRemaining = parseInt(spacesRemainingDropdown.value, 10);
      const costValue = costInput.value.trim();
      const postcodeValue = postcodeInput.value.trim();
      const costRegex = /^\d+(\.\d{1,2})?$/;
    
      if (!validateTimeRange()) return;

      if (!validateAgeRange()) return;
      
      if (spacesRemaining > totalSpaces) {
        alert("Spaces remaining cannot be greater than total spaces.");
        return;
      }
    
      if (!costRegex.test(costValue)) {
        alert("Please enter a valid cost (e.g., 10 or 10.50).");
        return;
      }
    
      // Final API validation before submission
      const isValid = await fetch(`https://api.postcodes.io/postcodes/${postcodeValue.replace(/\s+/g, "").toUpperCase()}/validate`)
        .then(res => res.json())
        .then(data => data.result)
        .catch(() => false);
    
      if (!isValid) {
        alert("Invalid UK postcode. Please check and try again.");
        return;
      }
        
      // If everything is valid, submit the form
      form.submit();
    });
  });

</script>
  